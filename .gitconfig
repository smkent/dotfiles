[user]
    name = Stephen Kent
    email = smkent@smkent.net
[core]
    editor = vim
    pager = less -F -R -X -x1,5
    excludesfile = ~/.gitignore.global
[color]
    ui = true
[push]
    default = upstream
[branch]
    autosetuprebase = always
[color "branch"]
    current = 112       # Brighter green
    remote = 203        # Brighter red
    upstream = blue bold
[color "decorate"]
    HEAD = red bold
    remoteBranch = blue bold
    tag = yellow bold
[color "diff"]
    old = 203           # Brighter red
    new = 112           # Brighter green
    frag = 74 bold      # Brighter blue
    func = magenta bold
[color "grep"]
    filename = 147      # Purple
    function = 11       # Bright yellow
    linenumber = 112    # Brighter green
    match = 202 bold    # Orange
    separator = 245     # Gray
[color "status"]
    added = 112         # Brighter green
    branch = white bold ul
    changed = 203
    unmerged = 11       # Bright yellow
    untracked = 32      # Brighter blue
[merge]
    conflictstyle = diff3
[log]
    date = local
[advice]
    statusHints = false
[diff]
    mnemonicprefix = true
    renames = copies
[alias]
    a = add
    ap = add -u -p
    au = add -u
    b = branch
    bd = branch -d
    br = branch -vv
    ca = commit --amend
    # "create branch"; checkout a new branch with same tracking info if possible
    cb = "!f() { if [ ${#} -lt 1 ]; then return 1; fi; u=$(git rb \"${2}\"); \
                 git checkout -b \"${1}\" \"${2:-HEAD}\" || return ${?}; \
                 [ -n \"${u}\" ] && git branch --set-upstream-to \"${u}\"; }; f"
    cf = commit --amend --no-edit  # "commit fixup"
    ci = commit
    cm = commit -m
    co = checkout
    cp = cherry-pick
    cv = commit -v
    cx = cherry-pick -x
    d = diff
    ds = diff --staged
    dw = diff --word-diff=color  # "diff words"
    ec = config --global -e  # "edit config"
    el = config --local -e  # "edit local"
    f = fetch
    # "find alias"; based on "finda" from: http://brettterpstra.com/2014/08/04/
    # shell-tricks-one-git-alias-to-rule-them-all/
    fa = "!f() { git config --global --get-regexp alias | \
          grep -i \"$1\" | awk -v nr=2 \
          '{sub(/^alias\\./,\"\")};{printf(\"\\033[1;34m%10s\\033[0;0m\", $1)};\
           {sep=FS};{for (x=nr; x<=NF; x++) {printf \"%s%s\", sep, $x; };\
           print \"\\033[0;39m\"}'; }; f"
    # "find files"
    ff = "!f() { if [ -n \"${GIT_PREFIX}\" ]; then cd \"${GIT_PREFIX}\"; fi; \
                 if [ -z \"${1}\" ]; then git ls-files; else \
                 git ls-files | grep --color=auto \"${@}\"; fi; }; f"
    # "log"; git log with extra colors, commit date, and relative commit date
    l = log --pretty=format:'%C(auto,228)commit %H %C(auto,208)(%p)%C(auto,reset)%n%C(auto,117)Author: %an <%ae>%C(reset)%n%C(auto,67)CDate:  %cd (%cr)%C(auto,reset)%n%n%w(0,4,4)%B'
    l1 = "!git l -n 1"  # "log 1"; depends on the "l" alias
    # "log compact"; git log with metadata on one line
    lc = log --date=relative --pretty=format:'%C(auto,228)%H %C(auto,117)%<(20)%an %C(auto,67)%cd%C(auto,reset)%n%w(0,2,2)%s%n%+b'
    # "log files"; one line per commit followed by the changed file list
    lf = log --numstat --date=relative --pretty=format:'%C(auto,228)%<(8)%h%C(auto,112 bold)%d%C(auto,reset) %-s%C(auto,67) %cd%C(auto,reset)'
    # "long line" log; similar to "lo" but with author and PGP key info added
    ll = log --date=relative --pretty=format:'%C(auto,67)%>(14,trunc)%cd %C(auto,117)%>(15,trunc)%an %C(auto,228)%h%C(auto,13)% GK%C(auto,112 bold)%d%C(auto,reset) %-s%C(auto,reset)'
    # "log oneline"
    lo = log --date=relative --pretty=format:'%C(auto,67)%>(14,trunc)%cd %C(auto,228)%h%C(auto,112 bold)%d%C(auto,reset) %-s%C(auto,reset)'
    # "log eXtra"; git log with both author and committer information
    lx = log --pretty=format:'%C(auto,228)commit %H %C(auto,208)(%p)%C(auto,reset)%n%C(auto,117)Author:    %an <%ae> %C(auto,67)%ad (%ar)%C(auto,reset)%n%C(auto,117)Committer: %cn <%ce> %C(auto,67)%cd (%cr)%C(auto,reset)%n%n%w(0,4,4)%B'
    # "no push"; track another branch with push disabled
    np = "!f() { b=$(git rev-parse --abbrev-ref HEAD); \
                 r=\"${1:-$(git rb)}\"; \
                 if [ -z \"${r}\" ] || [ \"${b}\" = HEAD ]; then return 1; fi; \
                 set -x; \
                 git branch --set-upstream-to \"${r}\" && \
                 git config --local branch.\"${b}\".pushremote no_push; }; f"
    p = pull
    r = reset
    ra = rebase --abort
    # "remote branch"; print remote tracking branch
    rb = "!f() { h=${1:-$(git symbolic-ref -q HEAD)} && \
                 git for-each-ref --format='%(upstream:short)' \
                 \"refs/heads/${h#refs/heads/}\" | grep -ve '^$' || true; }; f"
    rc = rebase --continue
    rh = reset HEAD
    # "rebase interactive"; $1 is a ref, commit count, or empty for new commits
    ri = "!f() { r=\"${1}\"; if [ \"${1}\" -eq \"${1}\" ]; then r=\"@~${1}\"; \
                 fi >/dev/null 2>&1; git rebase -i ${r}; }; f"
    rr = reset --hard @{u}  # "reset to remote"
    rt = reset --hard  # "reset to"
    s = status -s --branch
    sb = show-branch
    st = status
    su = branch --set-upstream-to  # "set upstream"
    # "upstream branch"; compare local and remote tracking branch histories
    ub = "!f() { h=${1:-$(git symbolic-ref -q HEAD)}; u=$(git rb \"${h}\"); \
                 [ -n \"${u}\" ] && git show-branch \"${u}\" \"${h}\"; }; f"
    # "upstream log"; show log graph between local and remote tracking branch
    ul = "!f() { git l --graph \"${1}@{u}..${1-@}\"; }; f"
    # "upstream log eXtra"; same as "ul" but using "git lx" instead of "git l"
    ux = "!f() { git lx --graph \"${1}@{u}..${1-@}\"; }; f"
    # "unset upstream"
    uu = "!f() { b=$(git rev-parse --abbrev-ref HEAD); set -x; \
                 git config --local --unset \"branch.${b}.remote\"; \
                 git config --local --unset \"branch.${b}.merge\"; }; f"

[user]
    name = Stephen Kent
    email = smkent@smkent.net
[core]
    editor = vim
    pager = less -F -R -X -x1,5
    excludesfile = ~/.gitignore.global
[color]
    ui = true
[push]
    default = upstream
[branch]
    autosetuprebase = always
[color "branch"]
    remote = 9      # Lighter red
    upstream = blue bold
[color "decorate"]
    HEAD = red bold
    remoteBranch = blue bold
    tag = yellow bold
[color "diff"]
    frag = blue bold
    func = magenta bold
[color "grep"]
    context = white dim
    filename = magenta
    function = yellow
    linenumber = green
    match = red bold
    separator = blue
[color "status"]
    added = green
    branch = white bold ul
    changed = 9     # Bright red
    unmerged = 11   # Bright yellow
    untracked = 32  # Brighter blue
[merge]
    conflictstyle = diff3
[log]
    date = local
[advice]
    statusHints = false
[diff]
    mnemonicprefix = true
    renames = copies
[alias]
    au = add -u
    b = branch
    br = branch -vv
    ca = commit --amend
    cf = commit --amend --no-edit  # "commit fixup"
    ci = commit
    co = checkout
    d = diff
    ds = diff --staged
    dw = diff --word-diff=color  # "diff words"
    ec = config --global -e  # "edit config"
    # "find alias"; based on "finda" from: http://brettterpstra.com/2014/08/04/
    # shell-tricks-one-git-alias-to-rule-them-all/
    fa = "!f() { git config --global --get-regexp alias | \
          grep -i \"$1\" | awk -v nr=2 \
          '{sub(/^alias\\./,\"\")};{printf(\"\\033[1;34m%10s\\033[0;0m\", $1)};\
           {sep=FS};{for (x=nr; x<=NF; x++) {printf \"%s%s\", sep, $x; };\
           print \"\\033[0;39m\"}'; }; f"
    # "log"; git log with extra colors, commit date, and relative commit date
    l = log --pretty=format:'%C(auto,yellow)commit %H%C(auto,reset)%n%C(auto,12)Author: %an <%ae>%C(reset)%n%C(auto,blue)CDate:  %cd (%cr)%C(auto,reset)%n%n%w(0,4,4)%B'
    # "log compact"; git log with metadata on one line
    lc = log --date=relative --pretty=format:'%C(auto,yellow)%H %C(auto,12)%<(20)%an %C(auto,blue)%cd%C(auto,reset)%n%w(0,2,2)%s%n%+b'
    # "log files"; one line per commit followed by the changed file list
    lf = log --numstat --date=relative --pretty=format:'%C(auto,yellow)%<(8)%h%C(auto,blue bold)%d%C(auto,reset) %-s%C(auto,blue) %cd%C(auto,reset)'
    # "log oneline"
    lo = log --date=relative --pretty=format:'%C(auto,blue)%>(14)%cd %C(auto,yellow)%h%C(auto,blue bold)%d%C(auto,reset) %-s%C(auto,reset)'
    l1 = "!git l -n 1" # "log 1"; depends on the "l" alias
    p = pull
    rh = reset HEAD
    # "rebase interactive"; $1 is either a ref or a number of commits to rebase
    ri = "!f() { r=\"${1}\"; if [ \"${1}\" -eq \"${1}\" ]; then r=\"@~${1}\"; \
                 fi >/dev/null 2>&1; git rebase -i \"${r}\"; }; f"
    sb = show-branch
    st = status
    s = status -s
    # "upstream branch"; compare local and remote tracking branch histories
    ub = "!f() { h=${1:-$(git symbolic-ref -q HEAD)} && git show-branch \
                 $(git for-each-ref --format='%(upstream:short)' \
                   \"refs/heads/${h#refs/heads/}\") \"${h}\"; }; f"

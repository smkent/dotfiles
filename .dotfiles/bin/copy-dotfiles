#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys

description = "Copy the currently installed set of dotfiles to a remote host"
ap = argparse.ArgumentParser(description=description)
ap.add_argument(
    "-p",
    "--pretend",
    action="store_true",
    help="Only list the files that would be copied",
)
ap.add_argument(
    "-d",
    "--directory",
    metavar="dir",
    default="",
    help="Remote directory to use (default: ~)",
)
ap.add_argument(
    "-n",
    "--no-overwrite",
    action="store_true",
    help="Don't overwrite newer files on the target host",
)
ap.add_argument("host", help="Host to copy dotfiles to")
args = ap.parse_args()

excludes = [".git", ".gitignore", "README.md", ".dotfiles/img/screenshot-*"]
full_dirs = [".vim"]

os.chdir(os.path.dirname(sys.argv[0]))
git_toplevel = (
    subprocess.check_output(["git", "rev-parse", "--show-toplevel"])
    .decode("utf-8")
    .strip()
)
os.chdir(git_toplevel)
cmd = ["rsync", "-av", "-r", "--files-from=-"]
cmd += ["--exclude={}".format(x) for x in excludes]
if args.pretend:
    cmd.append("--dry-run")
if args.no_overwrite:
    cmd.append("--update")
cmd += [".", "{}:{}".format(args.host, args.directory)]
# Copy only tracked files (not full directories containing any tracked files)
git_files = subprocess.check_output(["git", "ls-files"]).decode("utf-8")
# Copy full .vim directory instead of just tracked files
others = subprocess.check_output(
    ["git", "ls-files", "--others", "--"] + full_dirs
).decode("utf-8")
p = subprocess.Popen(cmd, stdin=subprocess.PIPE)
p.stdin.write(git_files)
p.stdin.write(others)
p.communicate()
